import { useState, useRef } from 'react';
import ForwardInput from './ForwardInput';

import Input, { InputSize } from './Input';
import InputWithoutRef from './InputWithoutRef';
import OldInput from './OldInput';

export default function App() {
  const [val, setVal] = useState('');

  const inputRef = useRef<HTMLInputElement>(null);
  return (
    <div className="w-full min-h-screen font-sans">
      <header className="bg-neutral-50 py-10 text-center">
        <h1 className="text-xl text-bold">
          {"TUTO  : ComponentPropsWith[out]Ref<'elementHtml'>"}
        </h1>
      </header>

      <main className="mt-12 flex justify-center items-center flex-col">
        <section className="w-full mt-12 flex justify-center items-center flex-col">
          <label className="font-semibold mb-5">
            Input :
            <Input
              ref={inputRef} // 1Â° Je peu passÃ© une ref au composant et rÃ©cupÃ©rer l'Ã©lÃ©ment ici depuis le parent ðŸ”¥
              type="text" //2Â° "type" est un attribut natif d'un l'element <input>, je peu le passer en props sans avoir Ã  le dÃ©finir dans le composant ðŸ”¥ðŸ”¥
              name="Nom" //2Â° "name" : Idem
              value={val} //2Â° "value" : Idem
              required // 2Â° required : Idem
              inputSize={InputSize.NORMAL} // 3Â° InputSize est une props perso, je la dÃ©finis dans les props du composant <Input />
              onChangeValue={setVal} // 3Â° : idem
              className="ml-4" // 3Â° : Idem, "className n'est pas une props native d'un Ã©lÃ©ment html, elle est apportÃ© par React. Je dois donc la dÃ©finir dans les props. Il faut aussi la renomer dans le composant vu que l'attribut className existe dÃ©jÃ . (On peu aussi le nommer diffÃ©remment ici) "
            />
          </label>

          <p>
            Valeur de l'input Ã  partir de la ref du composant enfant :{' '}
            <span className="font-semibold">
              {inputRef.current && inputRef.current.value}{' '}
            </span>
          </p>
          <p>
            {' '}
            Valeur de l'input Ã  partir du state du parent :{' '}
            <span className="font-semibold">
              {inputRef.current && inputRef.current.value}{' '}
            </span>
          </p>
        </section>{' '}
        <label className="font-semibold mb-5 mt-5">
          OldInput :
          <OldInput
            //ref={inputRef}
            type="text"
            name="Nom"
            inputSize={InputSize.NORMAL}
            onChangeValue={setVal}
            value={val}
            className="ml-4"
            //required | => required n'a pas Ã©tÃ© dÃ©finis dans les props de oldProps, il y aura une erreur
          />
        </label>{' '}
        <label className="font-semibold mb-5 mt-5">
          ForwardInput :
          <ForwardInput
            ref={inputRef}
            type="text"
            name="Nom"
            inputSize={InputSize.NORMAL}
            onChangeValue={setVal}
            value={val}
            className="ml-4"
            //required | => required n'a pas Ã©tÃ© dÃ©finis dans les props de oldProps, il y aura une erreur
          />
        </label>
        <label className="font-semibold mb-5 mt-5">
          InputWithoutRef :
          <InputWithoutRef
            type="text"
            name="Nom"
            inputSize={InputSize.NORMAL}
            onChangeValue={setVal}
            value={val}
            className="ml-4"
            //required | => required n'a pas Ã©tÃ© dÃ©finis dans les props de oldProps, il y aura une erreur
          />
        </label>
      </main>
    </div>
  );
}
